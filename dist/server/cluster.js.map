{"version":3,"sources":["../../server/cluster.js"],"names":["cluster","require","OS","workers","masterProcess","console","info","cpus","length","process","pid","i","worker","fork","push","on","JSON","stringify","message","forEach","send","child_process","msg","isMaster"],"mappings":";;AAAA;;;AAGA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;AAEA,IAAIE,UAAU,EAAd,C,CAAmB;;AAEnB,IAAMC,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1BC,UAAQC,IAAR,wBAAmBJ,GAAGK,IAAH,GAAUC,MAA7B;AACAH,UAAQC,IAAR,8BAAyBG,QAAQC,GAAjC;;AAF0B,6BAIjBC,CAJiB;AAKxBN,YAAQC,IAAR,wCAAyBK,CAAzB;AACA,QAAMC,SAASZ,QAAQa,IAAR,EAAf;;AAEAV,YAAQW,IAAR,CAAaF,MAAb;AACAA,WAAOG,EAAP,CAAU,SAAV,EAAqB,mBAAW;AAC9BV,cAAQC,IAAR,wBAAmBG,QAAQC,GAA3B,oBAAmCM,KAAKC,SAAL,CAAeC,OAAf,CAAnC,gCACQN,OAAOH,OAAP,CAAeC,GADvB;AAED,KAHD;AATwB;;AAI1B,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,GAAGK,IAAH,GAAUC,MAA9B,EAAsCG,GAAtC,EAA2C;AAAA,UAAlCA,CAAkC;AAS1C;;AAEDR,UAAQgB,OAAR,CAAgB,kBAAU;AACxBd,YAAQC,IAAR,wBAAmBG,QAAQC,GAA3B,kDAAwCE,OAAOH,OAAP,CAAeC,GAAvD;AACAE,WAAOQ,IAAP,0DAA2BX,QAAQC,GAAnC;AACD,GAHD;AAID,CAnBD;;AAqBA,IAAMW,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1BhB,UAAQC,IAAR,8BAAyBG,QAAQC,GAAjC;;AAEAD,UAAQM,EAAR,CAAW,SAAX,EAAsB,mBAAW;AAC/BV,YAAQC,IAAR,8BAAyBG,QAAQC,GAAjC,gCAA2CM,KAAKC,SAAL,CAAeC,OAAf,CAA3C;AACD,GAFD;;AAIAb,UAAQC,IAAR,8BAAyBG,QAAQC,GAAjC;AACAD,UAAQW,IAAR,CAAa,EAACE,0DAAgBb,QAAQC,GAAzB,EAAb;AACAL,UAAQC,IAAR,8BAAyBG,QAAQC,GAAjC;AACD,CAVD;;AAYA,IAAIV,QAAQuB,QAAZ,EAAsB;AACpBnB;AACD,CAFD,MAEO;AACLiB;AACD","file":"cluster.js","sourcesContent":["/**\n * Created by w on 2018/4/8.\n */\nconst cluster = require('cluster');\nconst OS = require('os');\n\nlet workers = [];  //存储所有的子进程\n\nconst masterProcess = () => {\n  console.info(`一共有${OS.cpus().length}个核心`);\n  console.info(`master主进程${process.pid}启动`);\n\n  for (let i = 0; i < OS.cpus().length; i++) {\n    console.info(`正在Fork子进程${i}`);\n    const worker = cluster.fork();\n\n    workers.push(worker);\n    worker.on('message', message => {\n      console.info(`主进程${process.pid}收到${JSON.stringify(message)}\n          来自${worker.process.pid}`);\n    })\n  }\n\n  workers.forEach(worker => {\n    console.info(`主进程${process.pid}发消息给子进程${worker.process.pid}`);\n    worker.send(`msg:来自主进程的消息${process.pid}`)\n  }, this)\n};\n\nconst child_process = () => {\n  console.info(`Worker子进程${process.pid}启动并退出`);\n\n  process.on('message', message => {\n    console.info(`Worker子进程${process.pid}收到消息${JSON.stringify(message)}`)\n  });\n\n  console.info(`Worker子进程${process.pid}发消息给主进程`);\n  process.send({msg: `来自子进程的消息${process.pid}`});\n  console.info(`Worker子进程${process.pid}结束`)\n};\n\nif (cluster.isMaster) {\n  masterProcess();\n} else {\n  child_process();\n}"]}